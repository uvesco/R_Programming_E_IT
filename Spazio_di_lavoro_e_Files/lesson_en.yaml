- Class: meta
  Course: R Programming E
  Lesson: Spazio di lavoro e Files
  Author: David Kane
  Type: Standard
  Organization: Williams College
  Version: 0.1.2

- Class: text
  Output: 'In questa lezione imparerete a esaminare il vostro spazio di lavoro 
    locale in R e inizierete a esplorare la relazione tra lo spazio di lavoro e 
    il file system della vostra macchina.'

- Class: text
  Output: "Poiché i diversi sistemi operativi hanno convenzioni diverse per 
    quanto riguarda i percorsi dei file, i risultati di questi comandi possono 
    variare da una macchina all'altra."

- Class: text
  Output: Tuttavia, è importante notare che R fornisce un'API comune (un insieme 
    comune di comandi) per interagire con i file, in modo che il codice funzioni
    su diversi tipi di computer.

- Class: text
  Output: Facciamo un salto avanti per capire come funzionano queste funzioni 
    speciali!

- Class: cmd_question
  Output: Determinate quale directory la vostra sessione R sta usando come 
    directory di lavoro corrente usando getwd().
  CorrectAnswer: getwd()
  AnswerTests: omnitest(correctExpr='getwd()')
  Hint: Digitare getwd() per determinare la directory di lavoro corrente.

- Class: cmd_question
  Output: Elencare tutti gli oggetti presenti nell'area di lavoro locale 
    utilizzando ls().
  CorrectAnswer: ls()
  AnswerTests: omnitest(correctExpr='ls()')
  Hint: Digitare ls() per visualizzare tutti gli oggetti presenti nell'area di 
    lavoro locale.

- Class: text
  Output: Alcuni comandi di R sono identici a quelli equivalenti su Linux o Mac. 
    Entrambi i sistemi operativi Linux e Mac sono basati su un sistema operativo 
    chiamato Unix. È sempre una buona idea saperne di più su Unix!

- Class: cmd_question
  Output: Assegnare 9 a x usando x <- 9.
  CorrectAnswer: x <- 9
  AnswerTests: omnitest(correctExpr='x <- 9')
  Hint: Digitare x <- 9 per assegnare 9 a x.

- Class: cmd_question
  Output: Ora date un'occhiata agli oggetti presenti nell'area di lavoro usando ls().
  CorrectAnswer: ls()
  AnswerTests: omnitest(correctExpr='ls()')
  Hint: Digitare ls() per visualizzare tutti gli oggetti presenti nell'area di lavoro.

- Class: cmd_question
  Output: Elencare tutti i file presenti nella cartella di lavoro utilizzando 
    list.files() o dir().
  CorrectAnswer: list.files()
  AnswerTests: any_of_exprs('list.files()', 'dir()')
  Hint: Digitare list.files() per tutti i file presenti nella directory di lavoro.

- Class: cmd_question
  Output: Nel corso di questa lezione, dovreste esaminare la pagina di aiuto per 
    ogni nuova funzione. Consultate la pagina di aiuto di list.files con il 
    comando ?list.files.
  CorrectAnswer: ?list.files
  AnswerTests: any_of_exprs('?list.files', '?dir', 'help("list.files")', 'help("dir")')
  Hint: Digitare ?list.files per visualizzare la pagina di aiuto.

- Class: text
  Output: Una delle parti più utili di qualsiasi file di aiuto di R è la sezione 
    Vedi anche. Leggete questa sezione per list.files. Alcune di queste funzioni 
    potranno essere utilizzate nelle parti successive di questa lezione.

- Class: text
  Output: L'uso della funzione args() sul nome di una funzione è anche un modo 
    comodo per vedere quali argomenti può accettare una funzione. 


- Class: cmd_question
  Output: Utilizzare la funzione args() per determinare gli argomenti di list.files().
  CorrectAnswer: args(list.files)
  AnswerTests: omnitest(correctExpr='args(list.files)')
  Hint: Digitare args(list.files) per vedere gli argomenti di list.files.


- Class: cmd_question
  Output: Assegnare il valore della directory di lavoro corrente a una variabile chiamata "old.dir".
  CorrectAnswer: old.dir <- getwd()
  AnswerTests: omnitest(correctExpr='old.dir <- getwd()')
  Hint: Digitare old.dir <- getwd() per assegnare il valore della directory di lavoro corrente a una variabile chiamata "old.dir".

- Class: text
  Output: We will use old.dir at the end of this lesson to move back to the 
    place that we started. A lot of query functions like getwd() have the 
    useful property that they return the answer to the question as a result of 
    the function.

- Class: cmd_question
  Output: Use dir.create() to create a directory in the current working 
    directory called "testdir".
  CorrectAnswer: dir.create("testdir")
  AnswerTests: omnitest(correctExpr='dir.create("testdir")')
  Hint: Type dir.create("testdir") to create a directory in the current working 
    directory called "testdir".

- Class: text
  Output: We will do all our work in this new directory and then delete it after
    we are done. This is the R analog to 
    "Take only pictures, leave only footprints."

- Class: cmd_question
  Output: Set your working directory to "testdir" with the setwd() command.
  CorrectAnswer: setwd("testdir")
  AnswerTests: any_of_exprs('setwd("testdir")', 'setwd("testdir/")')
  Hint: Use setwd("testdir") to set your working directory to "testdir".

- Class: text
  Output: "In general, you will want your working directory to be someplace 
    sensible, perhaps created for the specific project that you are working on. 
    In fact, organizing your work in R packages using RStudio is an excellent 
    option. Check out RStudio at http://www.rstudio.com/"

- Class: cmd_question
  Output: Create a file in your working directory called "mytest.R" using the
    file.create() function.
  CorrectAnswer: file.create("mytest.R")
  AnswerTests: omnitest(correctExpr='file.create("mytest.R")')
  Hint: file.create("mytest.R") will get the job done!

- Class: cmd_question
  Output: "This should be the only file in this newly created directory. Let's
    check this by listing all the files in the current directory."
  CorrectAnswer: list.files()
  AnswerTests: any_of_exprs('list.files()', 'dir()')
  Hint: list.files() shows that the directory only contains mytest.R.

- Class: cmd_question
  Output: Check to see if "mytest.R" exists in the working directory using the
    file.exists() function.
  CorrectAnswer: file.exists("mytest.R")
  AnswerTests: omnitest(correctExpr='file.exists("mytest.R")')
  Hint: Use file.exists("mytest.R") to check that a file exists.

- Class: text
  Output: These sorts of functions are excessive for interactive use. But, if 
    you are running a program that loops through a series of files and does some 
    processing on each one, you will want to check to see that each exists before 
    you try to process it.

- Class: cmd_question
  Output: Access information about the file "mytest.R" by using file.info().
  CorrectAnswer: file.info("mytest.R")
  AnswerTests: omnitest(correctExpr='file.info("mytest.R")')
  Hint: file.info("mytest.R") will do the trick!

- Class: text
  Output: You can use the $ operator --- e.g., file.info("mytest.R")$mode --- 
    to grab specific items.

- Class: cmd_question
  Output: Change the name of the file "mytest.R" to "mytest2.R" by using
    file.rename().
  CorrectAnswer: file.rename("mytest.R", "mytest2.R")
  AnswerTests: any_of_exprs('file.rename("mytest.R", "mytest2.R")', 'file.rename(from = "mytest.R", to = "mytest2.R")')
  Hint: file.rename("mytest.R", "mytest2.R") is the answer. Googling 
    using key words from the question, along with the letter R, will often give 
    you a good hint.

- Class: text
  Output: "Your operating system will provide simpler tools for these sorts 
    of tasks, but having the ability to manipulate files programatically 
    is useful. You might now try to delete mytest.R using 
    file.remove('mytest.R'), but that won't work since mytest.R no longer 
    exists. You have already renamed it."

- Class: cmd_question
  Output: Make a copy of "mytest2.R" called "mytest3.R" using file.copy().
  CorrectAnswer: file.copy("mytest2.R", "mytest3.R")
  AnswerTests: any_of_exprs('file.copy("mytest2.R", "mytest3.R")', 'file.copy(from = "mytest2.R", to = "mytest3.R")')
  Hint: file.copy("mytest2.R", "mytest3.R") works.

- Class: text
  Output: You now have two files in the current directory. That may not seem 
    very interesting. But what if you were working with dozens, or millions, 
    of individual files? In that case, being able to programatically act on 
    many files would be absolutely necessary. Don't forget that you can, 
    temporarily, leave the lesson by typing play() and then 
    return by typing nxt().

- Class: cmd_question
  Output: Provide the relative path to the file "mytest3.R" by using file.path().
  CorrectAnswer: file.path("mytest3.R")
  AnswerTests: omnitest(correctExpr='file.path("mytest3.R")')
  Hint: file.path("mytest3.R") works.

- Class: cmd_question
  Output: "You can use file.path to construct file and directory paths that are
    independent of the operating system your R code is running on. Pass 'folder1'
    and 'folder2' as arguments to file.path to make a platform-independent pathname."
  CorrectAnswer: file.path("folder1", "folder2")
  AnswerTests: omnitest(correctExpr='file.path("folder1", "folder2")')
  Hint: file.path("folder1", "folder2") works.

- Class: cmd_question
  Output: "Take a look at the documentation for dir.create by entering 
    ?dir.create . Notice the 'recursive' argument. In order to create nested
    directories, 'recursive' must be set to TRUE."
  CorrectAnswer: ?dir.create
  AnswerTests: omnitest(correctExpr='?dir.create')
  Hint: ?dir.create will show you the docs.

- Class: cmd_question
  Output: Create a directory in the current working directory called 
    "testdir2" and a subdirectory for it called "testdir3", all in one command
    by using dir.create() and file.path().
  CorrectAnswer: dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
  AnswerTests: omnitest(correctExpr='dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)')
  Hint: "dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE) will do 
    the trick. If you forgot the recursive argument, the command may have 
    appeared to work, but it didn't create the nested directory."

- Class: cmd_question
  Output: Go back to your original working directory using setwd(). (Recall that we 
    created the variable old.dir with the full path for the orginal working 
    directory at the start of these questions.)
  CorrectAnswer: setwd(old.dir)
  AnswerTests: omnitest(correctExpr='setwd(old.dir)')
  Hint: Use setwd(old.dir).

- Class: text
  Output: "It is often helpful to save the settings that you had before you 
    began an analysis and then go back to them at the end. This trick is 
    often used within functions; you save, say, the par() settings that 
    you started with, mess around a bunch, and then set them back to the 
    original values at the end. This isn't the same as what we have done 
    here, but it seems similar enough to mention."

- Class: text
  Output: "Take nothing but results. Leave nothing but assumptions. 
    That sounds like 'Take nothing but pictures. Leave nothing but 
    footprints.' But it makes no sense! Surely our readers can come up 
    with a better motto . . ."

- Class: text
  Output: "In this lesson, you learned how to examine your R workspace and 
  work with the file system of your machine from within R. Thanks for playing!"

- Class: mult_question
  Output: Would you like to inform someone about your successful completion of 
    this lesson via email?
  CorrectAnswer: NULL
  AnswerChoices: Yes; No
  AnswerTests: notify()
  Hint: NULL
  
