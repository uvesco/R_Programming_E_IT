- Class: meta
  Course: R Programming E
  Lesson: Elementi di base del linguaggio
  Author: Nick Carchedi
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.0

- Class: text
  Output: In questa lezione esploreremo alcuni elementi di base del linguaggio di programmazione R.

- Class: text
  Output: Se in qualsiasi momento si desiderano maggiori informazioni su un particolare argomento relativo a R, 
    è possibile digitare help.start() al prompt, che aprirà un menu di risorse (all'interno di RStudio o del browser 
    web predefinito, a seconda della configurazione).
    In alternativa, una semplice ricerca sul web spesso fornisce la risposta che si sta cercando.

- Class: cmd_question
  Output: Nella sua forma più semplice, R può essere usata come un a calcolatrice interattiva. Digita
    5 + 7 e premi Invio.
  CorrectAnswer: 5 + 7
  AnswerTests: omnitest(correctExpr='5 + 7')
  Hint: Digita 5 + 7 e premi invio.

- Class: text
  Output: R stampa semplicemente il risultato di 12 per impostazione predefinita. 
    Tuttavia, R è un linguaggio di programmazione e spesso il motivo per cui si 
    utilizza un linguaggio di programmazione invece di una calcolatrice è quello 
    di automatizzare un processo o di evitare inutili ripetizioni.

- Class: text
  Output: In questo caso, potremmo voler utilizzare il risultato ottenuto in precedenza in un secondo calcolo.
    Invece di ridigitare 5 + 7 ogni volta che ne abbiamo bisogno, possiamo semplicemente creare una nuova variabile
    che memorizza il risultato.

- Class: text
  Output: 'Il modo in cui si assegna un valore a una variabile in R è usando l''operatore di assegnazione,
    che è semplicemente un simbolo ''meno di'' seguito da un segno ''meno''. Si presenta in questo modo: <-'
  
- Class: text
  Output: Considerate l'operatore di assegnazione come una freccia. Si assegna il valore
    sul lato destro della freccia al nome della variabile sul lato sinistro della freccia.

- Class: cmd_question
  Output: Per assegnare il risultato di 5 + 7 a una nuova variabile chiamata x, 
    si digita x <- 5 + 7. Questo può essere letto come 'x diventa 5 più 7'. Provate ora.
  CorrectAnswer: x <- 5 + 7
  AnswerTests: any_of_exprs('x <- 5 + 7', 'x <- 7 + 5')
  Hint: Digitare x <- 5 + 7. È importante includere un singolo spazio su ogni lato 
    dell''operatore di assegnazione, ma NON mettere uno spazio tra la `<` e la `-` che formano la freccia.

- Class: text
  Output: Si noterà che questa volta R non ha stampato il risultato 12. Quando si
    usa l'operatore di assegnazione, R presume che non si voglia vedere il
    risultato immediatamente, ma che si intenda utilizzarlo per qualcos'altro in seguito.

- Class: cmd_question
  Output: Per visualizzare il contenuto della variabile x, basta digitare x e premere
    Invio. Provate ora.
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr='x')
  Hint: Digitare x e premere Invio. Il valore di x verrà visualizzato automaticamente.

- Class: cmd_question
  Output: Ora, memorizzate il risultato di x - 3 in una nuova variabile denominata y.
  CorrectAnswer: y <- x - 3
  AnswerTests: omnitest(correctExpr='y <- x - 3')
  Hint: Digitare y <- x - 3 e premere Invio. Se utilizzare x - 3 o x-3 è una
    scelta personale, ma è buona abitudine includere uno spazio su entrambi i
    lati dell'operatore di assegnazione.

- Class: cmd_question
  Output: Qual è il valore di y? Digitate y per scoprirlo.
  CorrectAnswer: 'y'
  AnswerTests: omnitest(correctExpr='y')
  Hint: Digitare y e premere Invio.

- Class: text
  Output: Ora creiamo una piccola collezione di numeri chiamata vettore. Ogni
    oggetto che contiene dati è chiamato struttura di dati e i vettori numerici
    sono il tipo più semplice di struttura di dati in R. Infatti, anche un
    singolo numero è considerato un vettore di lunghezza uno.

- Class: cmd_question
  Output: 'Il modo più semplice per creare un vettore è utilizzare la funzione c(), 
    che sta per ''concatenare'' o ''combinare''. Per creare un vettore contenente i 
    numeri 1.1, 9 e 3.14, digita c(1.1, 9, 3.14). Prova ora a memorizzare il 
    risultato in una variabile chiamata z. Questa è la prima funzione che utilizziamo. 
    ATTENZIONE: il separatore decimale è il punto (.), mentre la virgola (,) separa 
    gli argomenti delle funzioni. Il linguaggio R è case-sensitive.'
  CorrectAnswer: z <- c(1.1, 9, 3.14)
  AnswerTests: omnitest(correctExpr='z <- c(1.1, 9, 3.14)')
  Hint: 'Inserendo z <- c(1.1, 9, 3.14) assegnerai il vettore (1.1, 9, 3.14) a una 
    nuova variabile chiamata z. Includere singoli spazi dopo le virgole nel vettore 
    non è obbligatorio, ma aiuta a rendere il tuo codice meno confuso e più leggibile.
    ATTENZIONE: il separatore decimale è il punto (.), mentre la virgola (,) separa 
    gli argomenti delle funzioni. Il linguaggio R è case-sensitive.'

- Class: cmd_question
  Output: Ogni volta che hai domande su una particolare funzione, puoi accedere 
    ai file di aiuto integrati di R tramite il comando ?. Ad esempio, se desideri 
    ulteriori informazioni sulla funzione c(), digita ?c senza le parentesi che 
    normalmente seguono il nome di una funzione. Prova a farlo.
  CorrectAnswer: ?c
  AnswerTests: omnitest(correctExpr='?c')
  Hint: Digita ?c e premi Invio. Questo aprirà il file di aiuto per la funzione c().

- Class: cmd_question
  Output: Digita z per visualizzarne il contenuto. Nota che non ci sono virgole 
    a separare i valori nell'output.
  CorrectAnswer: z
  AnswerTests: omnitest(correctExpr='z')
  Hint: Digita z e premi Invio per visualizzarne il contenuto.

- Class: cmd_question
  Output: Puoi combinare vettori per creare un nuovo vettore. Crea un nuovo 
    vettore che contiene z, 555 e poi z di nuovo in quest'ordine. Non assegnare 
    questo vettore a una nuova variabile, così potremo vedere il risultato immediatamente.
  CorrectAnswer: c(z, 555, z)
  AnswerTests: omnitest(correctExpr='c(z, 555, z)')
  Hint: Digita c(z, 555, z). Non creare una nuova variabile. Vogliamo solo 
    visualizzare il risultato.

- Class: cmd_question
  Output: 'I vettori numerici possono essere utilizzati nelle espressioni 
    aritmetiche. Digita quanto segue per vedere cosa succede: z * 2 + 100.'
  CorrectAnswer: z * 2 + 100
  AnswerTests: omnitest(correctExpr='z * 2 + 100')
  Hint: Inserisci z * 2 + 100, senza assegnare il risultato a una variabile. 
    Il simbolo * viene utilizzato per la moltiplicazione.

- Class: text
  Output: Prima, R ha moltiplicato ciascuno dei tre elementi in z per 2. Poi ha 
    aggiunto 100 a ciascun elemento per ottenere il risultato che vedi sopra.
    
- Class: text
  Output: Altri operatori aritmetici comuni sono +, -, / e ^ (dove x^2 significa 
    'x al quadrato'). Per calcolare la radice quadrata, usa la funzione sqrt() e 
    per calcolare il valore assoluto, usa la funzione abs().

- Class: cmd_question
  Output: Calcola la radice quadrata di z - 1 e assegnala a una nuova variabile chiamata mia_radice. 
  CorrectAnswer: mia_radice <- sqrt(z - 1)
  AnswerTests: omnitest(correctExpr='mia_radice <- sqrt(z - 1)')
  Hint: Assegna il risultato di sqrt(z - 1) a una variabile chiamata mia_radice.

- Class: mult_question
  Output: Prima di visualizzare il contenuto della variabile mia_radice, cosa pensi 
    che contenga?
  CorrectAnswer: un vettore di lunghezza 3
  AnswerChoices: un vettore di lunghezza 3; a singolo numero (un vettore di lunghezza 1);
    un vettore di lunghezza 0 (un vettore vuoto)
  AnswerTests: omnitest(correctVal='un vettore di lunghezza 3')
  Hint: 'Pensa a come R ha gestito le altre operazioni "vettoriali": elemento per elemento.'

- Class: cmd_question
  Output: Stampa il contenuto di mia_radice.
  CorrectAnswer: mia_radice
  AnswerTests: omnitest(correctExpr='mia_radice')
  Hint: Digita semplicemente mia_radice e premi Invio per visualizzarne il valore.

- Class: text
  Output: Come potresti aver indovinato, R ha prima sottratto 1 da ogni elemento 
    di z, poi ha calcolato la radice quadrata di ogni elemento. Ciò ti lascia 
    con un vettore della stessa lunghezza del vettore originale z.

- Class: cmd_question
  Output: Ora, crea una nuova variabile chiamata mia_div che ottiene il valore di z diviso per mia_radice.
  CorrectAnswer: mia_div <- z / mia_radice
  AnswerTests: omnitest(correctExpr='mia_div <- z / mia_radice')
  Hint: Digita mia_div <- z / mia_radice. Gli spazi su entrambi i lati del segno / 
    non sono obbligatori, ma spesso migliorano la leggibilità rendendo il codice 
    meno confusionario. Alla fine, si tratta di preferenza personale.

- Class: mult_question
  Output: Quale affermazione pensi che sia vera?
  CorrectAnswer: Il primo elemento di mia_div è uguale al primo elemento di z 
    diviso per il primo elemento di mia_div, e così via...
  AnswerChoices: Il primo elemento di mia_div è uguale al primo elemento di z 
    diviso per il primo elemento di mia_div, e così via...; 
    mia_div è un numero singolo (cioè un vettore di lunghezza 1); 
    mia_div è indefinito
  AnswerTests: omnitest(correctVal='Il primo elemento di mia_div è uguale al 
    primo elemento di z diviso per il primo elemento di mia_div, e così via...')
  Hint: Pensa a come R gestisce le altre operazioni 'vettoriali' come `+` e `*`

- Class: cmd_question
  Output: Procedi con la stampa del contenuto di mia_div.
  CorrectAnswer: mia_div
  AnswerTests: omnitest(correctExpr='mia_div')
  Hint: Digita mia_div e premere Invio per visualizzarne il contenuto.

- Class: text
  Output: Quando vengono dati due vettori della stessa lunghezza, R esegue 
    semplicemente l'operazione aritmetica specificata (`+`, `-`, `*`, ecc.) 
    elemento per elemento. Se i vettori sono di lunghezza diversa, R "ricicla" 
    il vettore più corto finché non raggiunge la stessa lunghezza del vettore più lungo.

- Class: text
  Output: Quando abbiamo fatto z * 2 + 100 nel nostro esempio precedente, z era 
    un vettore di lunghezza 3, ma tecnicamente 2 e 100 sono vettori di lunghezza 1.

- Class: text
  Output: 'Dietro le quinte, R sta ''riciclando'' il 2 per ottenere un vettore di 
    2 e il 100 per ottenere un vettore di 100. il 100 per ottenere un vettore di 
    100. In altre parole, quando si chiede a R di calcolare z * 2 + 100, in 
    realtà il risultato è questo: z * c(2, 2, 2) + c(100, 100, 100).'

- Class: cmd_question
  Output: 'Per vedere un altro esempio di come funziona il ''riciclo'' dei vettori, 
    provate ad aggiungere c(1, 2, 3, 4) e c(0, 10). Non preoccupatevi di salvare 
    il risultato in una nuova variabile.'
  CorrectAnswer: c(1, 2, 3, 4) + c(0, 10)
  AnswerTests: omnitest(correctExpr='c(1, 2, 3, 4) + c(0, 10)')
  Hint: Inserite c(1, 2, 3, 4) + c(0, 10) nella console per vedere come R somma 
    due vettori di lunghezza diversa. Non assegnate il risultato a una variabile.

- Class: text
  Output: 'Se la lunghezza del vettore più corto non è divisibile per la lunghezza 
    del vettore più lungo, R applicherà comunque il metodo del ''riciclo'', ma 
    lancerà un avviso per far capire che potrebbe esserci qualcosa di strano.'

- Class: cmd_question
  Output: Provate c(1, 2, 3, 4) + c(0, 10, 100) per esempio.
  CorrectAnswer: c(1, 2, 3, 4) + c(0, 10, 100)
  AnswerTests: omnitest(correctExpr='c(1, 2, 3, 4) + c(0, 10, 100)')
  Hint: 'Digitate c(1, 2, 3, 4) + c(0, 10, 100) to see how R handles adding two vectors,
    when the shorter vector''s length does not divide evenly into the longer vector''s
    length. Don''t worry about assigning the result to a variable.'

- Class: text
  Output: Prima di concludere questa lezione, vorrei mostrarvi un paio di trucchi
    per risparmiare tempo.

- Class: text
  Output: All'inizio della lezione, avete calcolato z * 2 + 100. Facciamo finta 
    che abbiate commesso un errore e che abbiate voluto aggiungere 1000 anziché 
    100. Si può riscrivere l'espressione, oppure...

- Class: cmd_question
  Output: In molti ambienti di programmazione, la freccia verso l'alto scorre i 
    comandi precedenti. Provate a premere la freccia verso l'alto sulla tastiera 
    fino a raggiungere questo comando (z * 2 + 100), quindi cambiate 100 in 1000 
    e premete Invio. Se la freccia verso l'alto non funziona, digitate 
    semplicemente il comando corretto.
  CorrectAnswer: z * 2 + 1000
  AnswerTests: omnitest(correctExpr='z * 2 + 1000')
  Hint: Se il vostro ambiente non supporta la funzione di freccia verso l'alto, digitate il comando corretto per andare avanti.

- Class: text
  Output: Infine, facciamo finta di voler visualizzare il contenuto di una 
    variabile creata in precedenza, ma non riusciamo a ricordare se l'abbiamo 
    chiamata mia_div o miaDiv. Possiamo provare con entrambe e vedere cosa funziona, 
    oppure...

- Class: cmd_question
  Output: 'È possibile digitare le prime due lettere del nome della variabile, 
    quindi premere il tasto Tab (possibilmente più di una volta). La maggior 
    parte degli ambienti di programmazione fornisce un elenco delle variabili 
    create che iniziano con ''mia''. Questa funzione si chiama completamento 
    automatico e può essere molto utile quando si hanno molte variabili 
    nell''area di lavoro. Provate. (Se il completamento automatico non funziona, 
    digitate mia_div e premete Invio).'
  CorrectAnswer: mia_div
  AnswerTests: omnitest(correctExpr='mia_div')
  Hint: Se il vostro ambiente di programmazione non supporta il completamento 
    automatico, digitate mia_div e premete Invio per andare avanti.

- Class: mult_question
  Output: Vuoi informare qualcuno del completamento di questa lezione via e-mail?
  CorrectAnswer: NULL
  AnswerChoices: Yes; No
  AnswerTests: notify()
  Hint: NULL
