- Class: meta
  Course: R Programming E
  Lesson: Elementi di base del linguaggio
  Author: Nick Carchedi
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.0

- Class: text
  Output: In questa lezione esploreremo alcuni elementi di base del linguaggio di programmazione R.

- Class: text
  Output: Se in qualsiasi momento si desiderano maggiori informazioni su un particolare argomento relativo a R, 
    è possibile digitare help.start() al prompt, che aprirà un menu di risorse (all'interno di RStudio o del browser 
    web predefinito, a seconda della configurazione).
    In alternativa, una semplice ricerca sul web spesso fornisce la risposta che si sta cercando.

- Class: cmd_question
  Output: Nella sua forma più semplice, R può essere usata come un a calcolatrice interattiva. Digita
    5 + 7 e premi Invio.
  CorrectAnswer: 5 + 7
  AnswerTests: omnitest(correctExpr='5 + 7')
  Hint: Digita 5 + 7 e premi invio.

- Class: text
  Output: R stampa semplicemente il risultato di 12 per impostazione predefinita. 
    Tuttavia, R è un linguaggio di programmazione e spesso il motivo per cui si 
    utilizza un linguaggio di programmazione invece di una calcolatrice è quello 
    di automatizzare un processo o di evitare inutili ripetizioni.

- Class: text
  Output: In questo caso, potremmo voler utilizzare il risultato ottenuto in precedenza in un secondo calcolo.
    Invece di ridigitare 5 + 7 ogni volta che ne abbiamo bisogno, possiamo semplicemente creare una nuova variabile
    che memorizza il risultato.

- Class: text
  Output: 'Il modo in cui si assegna un valore a una variabile in R è usando l''operatore di assegnazione,
    che è semplicemente un simbolo ''meno di'' seguito da un segno ''meno''. Si presenta in questo modo: <-'
  
- Class: text
  Output: Considerate l'operatore di assegnazione come una freccia. Si assegna il valore
    sul lato destro della freccia al nome della variabile sul lato sinistro della freccia.

- Class: cmd_question
  Output: Per assegnare il risultato di 5 + 7 a una nuova variabile chiamata x, 
    si digita x <- 5 + 7. Questo può essere letto come 'x diventa 5 più 7'. Provate ora.
  CorrectAnswer: x <- 5 + 7
  AnswerTests: any_of_exprs('x <- 5 + 7', 'x <- 7 + 5')
  Hint: Digitare x <- 5 + 7. È importante includere un singolo spazio su ogni lato 
    dell''operatore di assegnazione, ma NON mettere uno spazio tra la `<` e la `-` che formano la freccia.

- Class: text
  Output: Si noterà che questa volta R non ha stampato il risultato 12. Quando si
    usa l'operatore di assegnazione, R presume che non si voglia vedere il
    risultato immediatamente, ma che si intenda utilizzarlo per qualcos'altro in seguito.

- Class: cmd_question
  Output: Per visualizzare il contenuto della variabile x, basta digitare x e premere
    Invio. Provate ora.
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr='x')
  Hint: Digitare x e premere Invio. Il valore di x verrà visualizzato automaticamente.

- Class: cmd_question
  Output: Ora, memorizzate il risultato di x - 3 in una nuova variabile denominata y.
  CorrectAnswer: y <- x - 3
  AnswerTests: omnitest(correctExpr='y <- x - 3')
  Hint: Digitare y <- x - 3 e premere Invio. Se utilizzare x - 3 o x-3 è una
    scelta personale, ma è buona abitudine includere uno spazio su entrambi i
    lati dell'operatore di assegnazione.

- Class: cmd_question
  Output: Qual è il valore di y? Digitate y per scoprirlo.
  CorrectAnswer: 'y'
  AnswerTests: omnitest(correctExpr='y')
  Hint: Digitare y e premere Invio.

- Class: text
  Output: Ora creiamo una piccola collezione di numeri chiamata vettore. Ogni
    oggetto che contiene dati è chiamato struttura di dati e i vettori numerici
    sono il tipo più semplice di struttura di dati in R. Infatti, anche un
    singolo numero è considerato un vettore di lunghezza uno.

- Class: cmd_question
  Output: 'Il modo più semplice per creare un vettore è utilizzare la funzione c(), 
    che sta per ''concatenare'' o ''combinare''. Per creare un vettore contenente i 
    numeri 1.1, 9 e 3.14, digita c(1.1, 9, 3.14). Prova ora a memorizzare il 
    risultato in una variabile chiamata z. Questa è la prima funzione che utilizziamo. 
    ATTENZIONE: il separatore decimale è il punto (.), mentre la virgola (,) separa 
    gli argomenti delle funzioni. Il linguaggio R è case-sensitive.'
  CorrectAnswer: z <- c(1.1, 9, 3.14)
  AnswerTests: omnitest(correctExpr='z <- c(1.1, 9, 3.14)')
  Hint: 'Inserendo z <- c(1.1, 9, 3.14) assegnerai il vettore (1.1, 9, 3.14) a una 
    nuova variabile chiamata z. Includere singoli spazi dopo le virgole nel vettore 
    non è obbligatorio, ma aiuta a rendere il tuo codice meno confuso e più leggibile.
    ATTENZIONE: il separatore decimale è il punto (.), mentre la virgola (,) separa 
    gli argomenti delle funzioni. Il linguaggio R è case-sensitive.'

- Class: cmd_question
  Output: Ogni volta che hai domande su una particolare funzione, puoi accedere 
    ai file di aiuto integrati di R tramite il comando ?. Ad esempio, se desideri 
    ulteriori informazioni sulla funzione c(), digita ?c senza le parentesi che 
    normalmente seguono il nome di una funzione. Prova a farlo.
  CorrectAnswer: ?c
  AnswerTests: omnitest(correctExpr='?c')
  Hint: Digita ?c e premi Invio. Questo aprirà il file di aiuto per la funzione c().

- Class: cmd_question
  Output: Digita z per visualizzarne il contenuto. Nota che non ci sono virgole 
    a separare i valori nell'output.
  CorrectAnswer: z
  AnswerTests: omnitest(correctExpr='z')
  Hint: Digita z e premi Invio per visualizzarne il contenuto.

- Class: cmd_question
  Output: Puoi combinare vettori per creare un nuovo vettore. Crea un nuovo 
    vettore che contiene z, 555 e poi z di nuovo in quest'ordine. Non assegnare 
    questo vettore a una nuova variabile, così potremo vedere il risultato immediatamente.
  CorrectAnswer: c(z, 555, z)
  AnswerTests: omnitest(correctExpr='c(z, 555, z)')
  Hint: Digita c(z, 555, z). Non creare una nuova variabile. Vogliamo solo 
    visualizzare il risultato.

- Class: cmd_question
  Output: 'I vettori numerici possono essere utilizzati nelle espressioni 
    aritmetiche. Digita quanto segue per vedere cosa succede: z * 2 + 100.'
  CorrectAnswer: z * 2 + 100
  AnswerTests: omnitest(correctExpr='z * 2 + 100')
  Hint: Inserisci z * 2 + 100, senza assegnare il risultato a una variabile. 
    Il simbolo * viene utilizzato per la moltiplicazione.

- Class: text
  Output: Prima, R ha moltiplicato ciascuno dei tre elementi in z per 2. Poi ha 
    aggiunto 100 a ciascun elemento per ottenere il risultato che vedi sopra.
    
- Class: text
  Output: Altri operatori aritmetici comuni sono +, -, / e ^ (dove x^2 significa 
    'x al quadrato'). Per calcolare la radice quadrata, usa la funzione sqrt() e 
    per calcolare il valore assoluto, usa la funzione abs().

- Class: cmd_question
  Output: Calcola la radice quadrata di z - 1 e assegnala a una nuova variabile chiamata mia_radice. 
  CorrectAnswer: my_sqrt <- sqrt(z - 1)
  AnswerTests: omnitest(correctExpr='my_sqrt <- sqrt(z - 1)')
  Hint: Assegna il risultato di sqrt(z - 1) a una variabile chiamata mia_radice.

- Class: mult_question
  Output: Prima di visualizzare il contenuto della variabile my_sqrt, cosa pensi 
    che contenga?
  CorrectAnswer: un vettore di lunghezza 3
  AnswerChoices: un vettore di lunghezza 3; a singolo numero (un vettore di lunghezza 1);
    un vettore di lunghezza 0 (un vettore vuoto)
  AnswerTests: omnitest(correctVal='un vettore di lunghezza 3')
  Hint: 'Pensa a come R ha gestito le altre operazioni "vettoriali": elemento per elemento.'

- Class: cmd_question
  Output: Print the contents of my_sqrt.
  CorrectAnswer: my_sqrt
  AnswerTests: omnitest(correctExpr='my_sqrt')
  Hint: Just type my_sqrt and press Enter to view its value.

- Class: text
  Output: As you may have guessed, R first subtracted 1 from each element of z, then
    took the square root of each element. This leaves you with a vector of the same
    length as the original vector z.

- Class: cmd_question
  Output: Now, create a new variable called my_div that gets the value of z divided
    by my_sqrt.
  CorrectAnswer: my_div <- z / my_sqrt
  AnswerTests: omnitest(correctExpr='my_div <- z / my_sqrt')
  Hint: Enter my_div <- z / my_sqrt. The spaces on either side of the `/` sign are not
    required, but can often improve readability by making code appear less cluttered.
    In the end, it's personal preference.

- Class: mult_question
  Output: Which statement do you think is true?
  CorrectAnswer: The first element of my_div is equal to the first element of z divided
    by the first element of my_sqrt, and so on...
  AnswerChoices: The first element of my_div is equal to the first element of z divided
    by the first element of my_sqrt, and so on...; my_div is a single number (i.e a
    vector of length 1); my_div is undefined
  AnswerTests: omnitest(correctVal='The first element of my_div is equal to the first
    element of z divided by the first element of my_sqrt, and so on...')
  Hint: Think about how R handled the other 'vectorized' operations like `+` and `*`.

- Class: cmd_question
  Output: Go ahead and print the contents of my_div.
  CorrectAnswer: my_div
  AnswerTests: omnitest(correctExpr='my_div')
  Hint: Type my_div and press Enter to see its contents.

- Class: text
  Output: When given two vectors of the same length, R simply performs the specified
    arithmetic operation (`+`, `-`, `*`, etc.) element-by-element. If the vectors
    are of different lengths, R 'recycles' the shorter vector until it is the same
    length as the longer vector.

- Class: text
  Output: When we did z * 2 + 100 in our earlier example, z was a vector of length
    3, but technically 2 and 100 are each vectors of length 1.

- Class: text
  Output: 'Behind the scenes, R is ''recycling'' the 2 to make a vector of 2s and
    the 100 to make a vector of 100s. In other words, when you ask R to compute z
    * 2 + 100, what it really computes is this: z * c(2, 2, 2) + c(100, 100, 100).'

- Class: cmd_question
  Output: To see another example of how this vector 'recycling' works, try adding
    c(1, 2, 3, 4) and c(0, 10). Don't worry about saving the result in a new variable.
  CorrectAnswer: c(1, 2, 3, 4) + c(0, 10)
  AnswerTests: omnitest(correctExpr='c(1, 2, 3, 4) + c(0, 10)')
  Hint: Enter c(1, 2, 3, 4) + c(0, 10) in the console to see how R adds two vectors
    of different length. Don't assign the result to a variable.

- Class: text
  Output: If the length of the shorter vector does not divide evenly into the length
    of the longer vector, R will still apply the 'recycling' method, but will throw
    a warning to let you know something fishy might be going on.

- Class: cmd_question
  Output: Try c(1, 2, 3, 4) + c(0, 10, 100) for an example.
  CorrectAnswer: c(1, 2, 3, 4) + c(0, 10, 100)
  AnswerTests: omnitest(correctExpr='c(1, 2, 3, 4) + c(0, 10, 100)')
  Hint: Type c(1, 2, 3, 4) + c(0, 10, 100) to see how R handles adding two vectors,
    when the shorter vector's length does not divide evenly into the longer vector's
    length. Don't worry about assigning the result to a variable.

- Class: text
  Output: Before concluding this lesson, I'd like to show you a couple of time-saving tricks.

- Class: text
  Output: Earlier in the lesson, you computed z * 2 + 100. Let's pretend that you made a mistake and that you meant to add 1000 instead of 100. You could either re-type the expression, or...

- Class: cmd_question
  Output: In many programming environments, the up arrow will cycle through previous commands. Try hitting the up arrow on your keyboard until you get to this command (z * 2 + 100), then change 100 to 1000 and hit Enter. If the up arrow doesn't work for you, just type the corrected command.
  CorrectAnswer: z * 2 + 1000
  AnswerTests: omnitest(correctExpr='z * 2 + 1000')
  Hint: If your environment does not support the up arrow feature, then just type the corrected command to move on.

- Class: text
  Output: Finally, let's pretend you'd like to view the contents of a variable that you created earlier, but you can't seem to remember if you named it my_div or myDiv. You could try both and see what works, or...

- Class: cmd_question
  Output: You can type the first two letters of the variable name, then hit the Tab key (possibly more than once). Most programming environments will provide a list of variables that you've created that begin with 'my'. This is called auto-completion and can be quite handy when you have many variables in your workspace. Give it a try. (If auto-completion doesn't work for you, just type my_div and press Enter.)
  CorrectAnswer: my_div
  AnswerTests: omnitest(correctExpr='my_div')
  Hint: If your programming environment doesn't support auto-completion, just type my_div and hit Enter to move on.

- Class: mult_question
  Output: Would you like to inform someone about your successful completion of 
    this lesson via email?
  CorrectAnswer: NULL
  AnswerChoices: Yes; No
  AnswerTests: notify()
  Hint: NULL
