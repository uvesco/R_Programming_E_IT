- Class: meta
  Course: R Programming E
  Lesson: Guardare i Dati
  Author: Nick Carchedi
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.11
- Class: text
  Output: Ogni volta che lavori con un nuovo set di dati, la prima cosa da fare è
    guardarlo! Qual è il formato dei dati? Quali sono le dimensioni? Quali sono i
    nomi delle variabili? Come vengono memorizzate le variabili? Ci sono dati mancanti?
    Ci sono difetti nei dati?
- Class: text
  Output: Questa lezione ti insegnerà come rispondere a queste domande e altro ancora
    utilizzando le funzioni integrate di R. Useremo un set di dati costruito dal database
    PLANTS del Dipartimento dell'agricoltura degli Stati Uniti (http://plants.usda.gov/adv_search.html).
- Class: cmd_question
  Output: Ho memorizzato i dati per te in una variabile chiamata plants. Digita ls()
    per elencare le variabili nel tuo spazio di lavoro, tra le quali dovrebbe esserci
    plants.
  CorrectAnswer: ls()
  AnswerTests: omnitest(correctExpr='ls()')
  Hint: Usa ls() per elencare le variabili nel tuo spazio di lavoro.
- Class: cmd_question
  Output: Cominciamo controllando la classe della variabile plants con class(plants).
    Questo ci darà un indizio sulla struttura generale dei dati.
  CorrectAnswer: class(plants)
  AnswerTests: omnitest(correctExpr='class(plants)')
  Hint: Usa class(plants) per controllare la classe della variabile plants.
- Class: text
  Output: È molto comune che i dati vengano archiviati in un data frame. È la classe
    predefinita per i dati letti in R usando funzioni come read.csv() e read.table(),
    che imparerai in un'altra lezione.
- Class: cmd_question
  Output: Poiché il set di dati è memorizzato in un data frame, sappiamo che è
    rettangolare. In altre parole, ha due dimensioni (righe e colonne) e si inserisce
    perfettamente in una tabella o in un foglio di calcolo. Usa dim(plants) per vedere
    esattamente con quante righe e colonne abbiamo a che fare.
  CorrectAnswer: dim(plants)
  AnswerTests: omnitest(correctExpr='dim(plants)')
  Hint: Usa dim(plants) per vedere le dimensioni esatte del data.frame plants.
- Class: text
  Output: Il primo numero che vedi (5166) è il numero di righe (osservazioni) e il
    secondo numero (10) è il numero di colonne (variabili).
- Class: cmd_question
  Output: Puoi anche usare nrow(plants) per vedere solo il numero di righe. Provalo.
  CorrectAnswer: nrow(plants)
  AnswerTests: omnitest(correctExpr='nrow(plants)')
  Hint: Usa nrow(plants) per vedere solo il numero di righe.
- Class: cmd_question
  Output: '... E ncol(plants) per vedere solo il numero di colonne.'
  CorrectAnswer: ncol(plants)
  AnswerTests: omnitest(correctExpr='ncol(plants)')
  Hint: Usa ncol(plants) per vedere solo il numero di colonne.
- Class: cmd_question
  Output: Se sei curioso di sapere quanto spazio occupa il set di dati in memoria,
    puoi utilizzare object.size(plants).
  CorrectAnswer: object.size(plants)
  AnswerTests: omnitest(correctExpr='object.size(plants)')
  Hint: object.size(plants) ti dirà quanta memoria è occupata dal data frame plants.
- Class: cmd_question
  Output: Ora che abbiamo un'idea della forma e delle dimensioni del set di dati,
    diamo un'idea di cosa c'è dentro. names(plants) restituirà un vettore di caratteri
    di nomi di colonne (cioè variabili). Prova.
  CorrectAnswer: names(plants)
  AnswerTests: omnitest(correctExpr='names(plants)')
  Hint: names(plants) restituirà un vettore di caratteri di nomi di colonne (cioè
    variabili).
- Class: text
  Output: Abbiamo applicato nomi di variabili abbastanza descrittivi a questo set
    di dati, ma non sarà sempre così. Un passaggio logico successivo consiste nel
    dare un'occhiata ai dati effettivi. Tuttavia, il nostro set di dati contiene oltre
    5000 osservazioni (righe), quindi non è pratico visualizzare tutto in una volta.
- Class: cmd_question
  Output: La funzione head() consente di visualizzare in anteprima la parte superiore
    del set di dati. Fai un tentativo con un solo argomento.
  CorrectAnswer: head(plants)
  AnswerTests: omnitest(correctExpr='head(plants)')
  Hint: head(plants) ti mostrerà la parte superiore del set di dati.
- Class: text
  Output: Prenditi un minuto per esaminare e comprendere l'output sopra. Ogni riga
    è etichettata con il numero di osservazione e ogni colonna con il nome della variabile.
    Probabilmente lo schermo non è abbastanza largo per visualizzare tutte e 10 le
    colonne affiancate, nel qual caso R visualizza quante più colonne possibile su
    ciascuna riga prima di continuare con quella successiva.
- Class: cmd_question
  Output: Per impostazione predefinita, head() mostra le prime sei righe dei dati.
    Puoi modificare questo comportamento passando come secondo argomento il numero
    di righe che desideri visualizzare. Usa head() per vedere in anteprima le prime
    10 righe (record) di plants.
  CorrectAnswer: head(plants, 10)
  AnswerTests: omnitest(correctExpr='head(plants, 10)')
  Hint: head(plants, 10) ti mostrerà le prime 10 righe del set di dati.
- Class: cmd_question
  Output: Lo stesso vale per l'utilizzo di tail() per visualizzare in anteprima la
    fine del set di dati. Usa tail() per visualizzare le ultime 15 righe.
  CorrectAnswer: tail(plants, 15)
  AnswerTests: omnitest(correctExpr='tail(plants, 15)')
  Hint: tail(plants, 15) ti mostrerà le ultime 15 righe del set di dati.
- Class: cmd_question
  Output: Dopo aver visualizzato in anteprima la parte superiore e inferiore dei dati,
    probabilmente hai notato molti NA, che sono i segnaposto di R per i valori mancanti.
    Usa il riepilogo summary(plants) per avere un'idea migliore di come ogni variabile è
    distribuita e di quanta parte del set di dati manca.
  CorrectAnswer: summary(plants)
  AnswerTests: omnitest(correctExpr='summary(plants)')
  Hint: Prova il summary(plants) per vedere come è distribuita ogni variabile e
    con quanti valori mancanti abbiamo a che fare.
- Class: text
  Output: summary() fornisce un output diverso per ogni variabile, a seconda della
    sua classe. Per i dati numerici come Precip_Min, summary() visualizza il minimo,
    il 1° quartile, la mediana, la media, il 3° quartile e il massimo. Questi valori
    ci aiutano a capire come vengono distribuiti i dati.
- Class: text
  Output: Per le variabili categoriche (chiamate variabili 'factor' in R), summary()
    mostra il numero di volte in cui ciascun valore (o 'livello') ricorre nei dati.
    Ad esempio, ogni valore di Scientific_Name appare solo una volta, poiché è unico
    per una pianta specifica. Al contrario, il riepilogo per Duration (anche una variabile
    factor) ci dice che il nostro set di dati contiene 3031 piante perenni, 682 piante
    annuali, ecc.
- Class: cmd_question
  Output: Puoi vedere che R ha troncato il riepilogo per Active_Growth_Period includendo
    una categoria generica chiamata "Altro". Poiché si tratta di una variabile categoriale/fattore,
    possiamo vedere quante volte ciascun valore si verifica effettivamente nei dati
    con table(plants$Active_Growth_Period).
  CorrectAnswer: table(plants$Active_Growth_Period)
  AnswerTests: omnitest(correctExpr='table(plants$Active_Growth_Period)')
  Hint: table(plants$Active_Growth_Period) visualizzerà i conteggi per ogni livello
    della variabile fattore.
- Class: text
  Output: Ognuna delle funzioni che abbiamo introdotto finora ha il suo ruolo nell'aiutarti
    a comprendere meglio la struttura dei tuoi dati. Tuttavia, abbiamo lasciato il
    meglio per ultimo....
- Class: cmd_question
  Output: Forse la funzione più utile e concisa per comprendere la *struttura* dei
    tuoi dati è str(). Fai un tentativo ora.
  CorrectAnswer: str(plants)
  AnswerTests: omnitest(correctExpr='str(plants)')
  Hint: Usa str(plants) per osservare la struttura dei tuoi dati.
- Class: text
  Output: Il bello di str() è che combina molte delle caratteristiche delle altre
    funzioni che hai già visto, il tutto in un formato conciso e leggibile. In cima,
    ci dice che la classe di plants è 'data.frame' e che ha 5166 osservazioni e
    10 variabili. Ci fornisce quindi il nome e la classe di ciascuna variabile, nonché
    un'anteprima del suo contenuto.
- Class: text
  Output: str() è in realtà una funzione molto generale che puoi usare sulla maggior
    parte degli oggetti in R. Ogni volta che vuoi capire la struttura di qualcosa
    (un set di dati, una funzione, ecc.), str() è un buon punto di partenza.
- Class: text
  Output: In questa lezione hai imparato a farti un'idea della struttura e dei contenuti
    di un nuovo set di dati utilizzando una raccolta di funzioni semplici e utili.
    Prendersi il tempo per farlo in anticipo può farti risparmiare tempo e frustrazione
    in seguito nella tua analisi.
- Class: mult_question
  Output: Vuoi informare qualcuno del completamento con successo di questa lezione
    via e-mail?
  CorrectAnswer: ~
  AnswerChoices: Yes; No
  AnswerTests: notify()
  Hint: ~
